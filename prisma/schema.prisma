// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TypeStore {
  perorangan
  official
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Location      Location[]
  Banner        Banner[]
  Store         Store[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Location {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  location String
  user     User   @relation(fields: [userId], references: [id])
}

model Banner {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  image       String
  title       String?
  description String?
  url         String?
  position    Int
  isActive    Boolean   @default(true)
  startDate   DateTime?
  endDate     DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Store {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  name        String
  location    String
  description String
  image       String
  docs        String
  typeStore   TypeStore[]
  email       String
  isVerified  Boolean?
  rating      Float?
  status      Boolean?
  user        User        @relation(fields: [userId], references: [id])
}
